---
- name: Launch EC2 instances and create infrastructure
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: k3s-vpc
        cidr_block: 10.0.0.0/16
        region: us-east-1
      register: vpc

    - name: Create Internet Gateway for VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        state: present
      register: igw_info

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 10.0.1.0/24
        az: us-east-1a
        state: present
        region: us-east-1
        map_public: True
        tags:
          Name: vpc-subnet
      register: subnet

    - name: Create VPC Subnet Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        tags:
          Name: route-table-for-subnet
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_info.gateway_id }}"

    - name: Create security group
      amazon.aws.ec2_group:
        name: k3s-sg
        description: k3s security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 6443
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Launch master instance
      amazon.aws.ec2_instance:
        key_name: ansible
        instance_type: t2.small
        image_id: ami-0e001c9271cf7f3b9  # Replace with your AMI ID
        wait: yes
        count: 1
        region: us-east-1
        tags:
          Name: k3s-master
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_groups:
          - "{{ security_group.group_id }}"
      register: master_instance

    - name: Launch worker instance
      amazon.aws.ec2_instance:
        key_name: ansible
        instance_type: t3.micro
        image_id: ami-0e001c9271cf7f3b9  # Replace with your AMI ID
        wait: yes
        count: 1
        region: us-east-1
        tags:
          Name: k3s-worker
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_groups:
          - "{{ security_group.group_id }}"
      register: worker_instance

    - name: Wait for SSH to be available on master instance
      wait_for:
        host: "{{ master_instance.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        delay: 10

    - name: Wait for SSH to be available on worker instance
      wait_for:
        host: "{{ worker_instance.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        delay: 10

    - name: Add master instance to inventory
      add_host:
        name: master
        ansible_host: "{{ master_instance.instances[0].public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /home/ubuntu/ansible.pem
        groups: k3s_master

    - name: Add worker instance to inventory
      add_host:
        name: worker
        ansible_host: "{{ worker_instance.instances[0].public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /home/ubuntu/ansible.pem
        groups: k3s_worker

- name: Set up K3s master
  hosts: k3s_master
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install k3s on master
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Get k3s join token
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token

    - name: Save k3s join token to local
      local_action: copy content="{{ k3s_token.stdout }}" dest=./node-token

- name: Set up K3s worker
  hosts: k3s_worker
  become: yes
  tasks:
    - name: Copy k3s join token to worker
      copy:
        src: ./node-token
        dest: /tmp/node-token

    - name: Install k3s on worker
      shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars['master']['ansible_host'] }}:6443 K3S_TOKEN=$(cat /tmp/node-token) sh -

- name: Deploy React app on K3s
  hosts: k3s_master
  vars:
    react_app_image: "sanjaysaini2000/react-app:latest"
  tasks:
    - name: Create deployment manifest for React app
      copy:
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: react-app
            labels:
              app: react-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: react-app
            template:
              metadata:
                labels:
                  app: react-app
              spec:
                containers:
                - name: react-app
                  image: "{{ react_app_image }}"
                  ports:
                  - containerPort: 80
                  env:
                  - name: NODE_ENV
                    value: "production"
        dest: /tmp/react-app-deployment.yml

    - name: Apply deployment manifest for React app
      shell: kubectl apply -f /tmp/react-app-deployment.yml
      args:
        chdir: /tmp/

    - name: Create service manifest for React app
      copy:
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: react-app-service
          spec:
            type: NodePort
            ports:
            - port: 80
              targetPort: 80
              nodePort: 30000
            selector:
              app: react-app
        dest: /tmp/react-app-service.yml

    - name: Apply service manifest for React app
      shell: kubectl apply -f /tmp/react-app-service.yml
      args:
        chdir: /tmp/
