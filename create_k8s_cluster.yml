---
- name: Launch EC2 instances and setup k3s cluster
  hosts: localhost
  gather_facts: False
  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: k3s-vpc
        cidr_block: 10.0.0.0/16
        region: us-east-1
      register: vpc

    - name: Internet Gateway for VPC
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        state: present
      register: igw_info

    - name: Create subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
#        description: create subnet
        cidr: 10.0.1.0/24
        az: us-east-1a
        state: present
        region: us-east-1
        map_public: True
        tags:
          Name: vpc subnet
      register: subnet
    - name: Creation of VPC Subnet Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        tags:
          Name: route table for subnet
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_info.gateway_id }}"
    - name: Create security group
      amazon.aws.ec2_group:
        name: k3s-sg
        description: k3s security group
        vpc_id: "{{ vpc.vpc.id }}"
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Create security group rule to allow SSH
      amazon.aws.ec2_group:
        name: k3s-sg
        description: Create security group rule to allow SSH
        state: present
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0

    - name: Create security group rule to allow HTTP
      amazon.aws.ec2_group:
        name: k3s-sg
        description: Create security group rule to allow SSH
        state: present
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0

    - name: Create security group rule to allow HTTPS
      amazon.aws.ec2_group:
        name: k3s-sg
        description: Create security group rule to allow https
        state: present
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0

    - name: Create security group rule to allow K3s communication
      amazon.aws.ec2_group:
        name: k3s-sg
        description: Create security group rule to allow K3s communication
        state: present
        region: us-east-1
        rules:
          - proto: tcp
            ports:
              - 6443
            cidr_ip: 0.0.0.0/0

    - name: Launch master instance
      amazon.aws.ec2_instance:
        key_name: ansible
        instance_type: t2.medium
        image_id: ami-00beae93a2d981137  # Replace with your AMI ID
        wait: yes
        count: 1
        region: us-east-1
        tags:
          Name: k3s-master
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_groups: "{{ security_group.group_id }}"
      register: master_instance

    - name: Launch worker instances
      amazon.aws.ec2_instance:
        key_name: ansible
        instance_type: t2.medium
        image_id: ami-00beae93a2d981137  # Replace with your AMI ID
        wait: yes
        count: 2
        region: us-east-1
        tags:
          Name: k3s-worker
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_groups:
          - "{{ security_group.group_id }}"
      register: worker_instances

    - name: Debug master_instance
      debug:
        var: master_instance

    - name: Debug worker_instances
      debug:
        var: worker_instances

  #  - name: Wait for SSH to be available on the new instances
   #   wait_for:
    #    host: "{{ item.public_ip_address }}"
   #     port: 22
    #    delay: 10
     #   timeout: 300
      #with_items: "{{ master_instance.instances + worker_instances.instances }}"
    - name: Wait for SSH to be available on master instance
      wait_for:
        host: "{{ master_instance.instances[0].public_ip_address }}"
        port: 22
        timeout: 300
        delay: 10

    - name: Wait for SSH to be available on worker instances
      wait_for:
        host: "{{ item.public_ip_address }}"
        port: 22
        timeout: 300
        delay: 10
      with_items: "{{ worker_instances.instances }}"

    - name: Add master instance to inventory
      add_host:
        name: master
        ansible_host: "{{ master_instance.instances[0].public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /home/ubuntu/keys
        group: k3s_master

    - name: Add worker instances to inventory
      add_host:
        name: "{{ item.instance_id }}"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: /home/ubuntu/keys
        group: k3s_worker
      with_items: "{{ worker_instances.instances }}"

- name: Set up k3s cluster
  hosts: k3s_master
  become: yes
  tasks:
    - name: Install k3s on master
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Get k3s join token
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token

    - name: Save k3s join token to local
      local_action: copy content="{{ k3s_token.stdout }}" dest=./node-token

- name: Set up k3s worker
  hosts: k3s_worker
  become: yes
  tasks:
    - name: Copy k3s join token to worker
      copy:
        src: ./node-token
        dest: /tmp/node-token

    - name: Install k3s on worker
      shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars['master']['ansible_host'] }}:6443 K3S_TOKEN=$(cat /tmp/node-token) sh -
      args:
